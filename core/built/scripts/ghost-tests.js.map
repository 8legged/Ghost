{
  "version": 3,
  "file": "ghost-tests.js",
  "sources": [
    ".tmp/ember-tests-transpiled/test-helper.js",
    ".tmp/ember-tests-transpiled/unit/components/gh-trim-focus-input_test.js",
    ".tmp/ember-tests-transpiled/unit/components/gh-url-preview_test.js",
    ".tmp/ember-tests-transpiled/unit/models/post_test.js",
    ".tmp/ember-tests-transpiled/unit/models/role_test.js",
    ".tmp/ember-tests-transpiled/unit/models/setting_test.js",
    ".tmp/ember-tests-transpiled/unit/models/tag_test.js",
    ".tmp/ember-tests-transpiled/unit/models/user_test.js",
    ".tmp/ember-tests-transpiled/unit/utils/ghost-paths_test.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"ghost/tests/test-helper\", \n  [\"ember-cli/test-loader\",\"ember/resolver\",\"ember-mocha\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var TestLoader = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var setResolver = __dependency3__.setResolver;\n\n    var resolver = Resolver.create();\n    resolver.namespace = {\n      modulePrefix: 'ghost'\n    };\n\n    setResolver(resolver);\n\n    TestLoader.load();\n\n    window.expect = chai.expect;\n\n    mocha.checkLeaks();\n    mocha.globals(['jQuery', 'EmberInspector']);\n    mocha.run();\n  });",
    "define(\"ghost/tests/unit/components/gh-trim-focus-input_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\n    var describeComponent = __dependency1__.describeComponent;\n    var it = __dependency1__.it;\n\n    describeComponent('gh-trim-focus-input', function () {\n        it('trims value on focusOut', function () {\n            var component = this.subject({\n                value: 'some random stuff   '\n            });\n\n            this.render();\n\n            component.$().focusout();\n            expect(component.$().val()).to.equal('some random stuff');\n        });\n\n        it('does not have the autofocus attribute if not set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: false\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.not.be.ok;\n        });\n\n        it('has the autofocus attribute if set to focus', function () {\n            var component = this.subject({\n                value: 'some text',\n                focus: true\n            });\n\n            this.render();\n\n            expect(component.$().attr('autofocus')).to.be.ok;\n        });\n    });\n  });",
    "define(\"ghost/tests/unit/components/gh-url-preview_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\n    var describeComponent = __dependency1__.describeComponent;\n    var it = __dependency1__.it;\n\n    describeComponent('gh-url-preview',\n        function () {\n            it('generates the correct preview URL with a prefix', function () {\n                var component = this.subject({\n                    prefix: 'tag',\n                    slug: 'test-slug',\n                    tagName: 'p',\n                    classNames: 'test-class',\n\n                    config: {blogUrl: 'http://my-ghost-blog.com'}\n                });\n\n                this.render();\n\n                expect(component.get('url')).to.equal('my-ghost-blog.com/tag/test-slug/');\n            });\n\n            it('generates the correct preview URL without a prefix', function () {\n                var component = this.subject({\n                    slug: 'test-slug',\n                    tagName: 'p',\n                    classNames: 'test-class',\n\n                    config: {blogUrl: 'http://my-ghost-blog.com'}\n                });\n\n                this.render();\n\n                expect(component.get('url')).to.equal('my-ghost-blog.com/test-slug/');\n            });\n        }\n    );\n  });",
    "define(\"ghost/tests/unit/models/post_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    describeModel('post',\n        {\n            needs:['model:user', 'model:tag', 'model:role']\n        },\n\n        function () {\n            it('has a validation type of \"post\"', function () {\n                var model = this.subject();\n\n                expect(model.validationType).to.equal('post');\n            });\n\n            it('isPublished and isDraft are correct', function () {\n                var model = this.subject({\n                    status: 'published'\n                });\n\n                expect(model.get('isPublished')).to.be.ok;\n                expect(model.get('isDraft')).to.not.be.ok;\n\n                Ember.run(function () {\n                    model.set('status', 'draft');\n\n                    expect(model.get('isPublished')).to.not.be.ok;\n                    expect(model.get('isDraft')).to.be.ok;\n                });\n            });\n\n            it('isAuthoredByUser is correct', function () {\n                var model = this.subject({\n                    author_id: 15\n                }),\n                user = Ember.Object.create({id: '15'});\n\n                expect(model.isAuthoredByUser(user)).to.be.ok;\n\n                Ember.run(function () {\n                    model.set('author_id', 1);\n\n                    expect(model.isAuthoredByUser(user)).to.not.be.ok;\n                });\n            });\n\n            it('updateTags removes and deletes old tags', function () {\n                var model = this.subject();\n\n                Ember.run(this, function () {\n                    var modelTags = model.get('tags'),\n                        tag1 = this.store().createRecord('tag', {id: '1'}),\n                        tag2 = this.store().createRecord('tag', {id: '2'}),\n                        tag3 = this.store().createRecord('tag');\n\n                    // During testing a record created without an explicit id will get\n                    // an id of 'fixture-n' instead of null\n                    tag3.set('id', null);\n\n                    modelTags.pushObject(tag1);\n                    modelTags.pushObject(tag2);\n                    modelTags.pushObject(tag3);\n\n                    expect(model.get('tags.length')).to.equal(3);\n\n                    model.updateTags();\n\n                    expect(model.get('tags.length')).to.equal(2);\n                    expect(model.get('tags.firstObject.id')).to.equal('1');\n                    expect(model.get('tags').objectAt(1).get('id')).to.equal('2');\n                    expect(tag1.get('isDeleted')).to.not.be.ok;\n                    expect(tag2.get('isDeleted')).to.not.be.ok;\n                    expect(tag3.get('isDeleted')).to.be.ok;\n                });\n            });\n        }\n    );\n  });",
    "define(\"ghost/tests/unit/models/role_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    describeModel('role', function () {\n        it('provides a lowercase version of the name', function () {\n            var model = this.subject({\n                name: 'Author'\n            });\n\n            expect(model.get('name')).to.equal('Author');\n            expect(model.get('lowerCaseName')).to.equal('author');\n\n            Ember.run(function () {\n                model.set('name', 'Editor');\n\n                expect(model.get('name')).to.equal('Editor');\n                expect(model.get('lowerCaseName')).to.equal('editor');\n            });\n        });\n    });\n  });",
    "define(\"ghost/tests/unit/models/setting_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    describeModel('setting', function () {\n        it('has a validation type of \"setting\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('setting');\n        });\n    });\n  });",
    "define(\"ghost/tests/unit/models/tag_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    describeModel('tag', function () {\n        it('has a validation type of \"tag\"', function () {\n            var model = this.subject();\n\n            expect(model.get('validationType')).to.equal('tag');\n        });\n    });\n  });",
    "define(\"ghost/tests/unit/models/user_test\", \n  [\"ember-mocha\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /*jshint expr:true */\n    var describeModel = __dependency1__.describeModel;\n    var it = __dependency1__.it;\n\n    describeModel('user',\n        {\n            needs: ['model:role']\n        },\n\n        function () {\n            it('has a validation type of \"user\"', function () {\n                var model = this.subject();\n\n                expect(model.get('validationType')).to.equal('user');\n            });\n\n            it('active property is correct', function () {\n                var model = this.subject({\n                    status: 'active'\n                });\n\n                expect(model.get('active')).to.be.ok;\n\n                ['warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].forEach(function (status) {\n                    Ember.run(function () {\n                        model.set('status', status);\n\n                        expect(model.get('status')).to.be.ok;\n                    });\n                });\n\n                Ember.run(function () {\n                    model.set('status', 'inactive');\n\n                    expect(model.get('active')).to.not.be.ok;\n                });\n\n                Ember.run(function () {\n                    model.set('status', 'invited');\n\n                    expect(model.get('active')).to.not.be.ok;\n                });\n            });\n\n            it('invited property is correct', function () {\n                var model = this.subject({\n                    status: 'invited'\n                });\n\n                expect(model.get('invited')).to.be.ok;\n\n                Ember.run(function () {\n                    model.set('status', 'invited-pending');\n\n                    expect(model.get('invited')).to.be.ok;\n                });\n\n                Ember.run(function () {\n                    model.set('status', 'active');\n\n                    expect(model.get('invited')).to.not.be.ok;\n                });\n\n                Ember.run(function () {\n                    model.set('status', 'inactive');\n\n                    expect(model.get('invited')).to.not.be.ok;\n                });\n            });\n\n            it('pending property is correct', function () {\n                var model = this.subject({\n                    status: 'invited-pending'\n                });\n\n                expect(model.get('pending')).to.be.ok;\n\n                Ember.run(function () {\n                    model.set('status', 'invited');\n\n                    expect(model.get('pending')).to.not.be.ok;\n                });\n\n                Ember.run(function () {\n                    model.set('status', 'inactive');\n\n                    expect(model.get('pending')).to.not.be.ok;\n                });\n            });\n\n            it('role property is correct', function () {\n                var model,\n                    role;\n\n                model = this.subject();\n\n                Ember.run(this, function () {\n                    role = this.store().createRecord('role', {name: 'Author'});\n\n                    model.get('roles').pushObject(role);\n\n                    expect(model.get('role.name')).to.equal('Author');\n                });\n\n                Ember.run(this, function () {\n                    role = this.store().createRecord('role', {name: 'Editor'});\n\n                    model.set('role', role);\n\n                    expect(model.get('role.name')).to.equal('Editor');\n                });\n            });\n\n            it('isAuthor property is correct', function () {\n                var model = this.subject();\n\n                Ember.run(this, function () {\n                    var role = this.store().createRecord('role', {name: 'Author'});\n\n                    model.set('role', role);\n\n                    expect(model.get('isAuthor')).to.be.ok;\n                    expect(model.get('isEditor')).to.not.be.ok;\n                    expect(model.get('isAdmin')).to.not.be.ok;\n                    expect(model.get('isOwner')).to.not.be.ok;\n                });\n            });\n\n            it('isEditor property is correct', function () {\n                var model = this.subject();\n\n                Ember.run(this, function () {\n                    var role = this.store().createRecord('role', {name: 'Editor'});\n\n                    model.set('role', role);\n\n                    expect(model.get('isEditor')).to.be.ok;\n                    expect(model.get('isAuthor')).to.not.be.ok;\n                    expect(model.get('isAdmin')).to.not.be.ok;\n                    expect(model.get('isOwner')).to.not.be.ok;\n                });\n            });\n\n            it('isAdmin property is correct', function () {\n                var model = this.subject();\n\n                Ember.run(this, function () {\n                    var role = this.store().createRecord('role', {name: 'Administrator'});\n\n                    model.set('role', role);\n\n                    expect(model.get('isAdmin')).to.be.ok;\n                    expect(model.get('isAuthor')).to.not.be.ok;\n                    expect(model.get('isEditor')).to.not.be.ok;\n                    expect(model.get('isOwner')).to.not.be.ok;\n                });\n            });\n\n            it('isOwner property is correct', function () {\n                var model = this.subject();\n\n                Ember.run(this, function () {\n                    var role = this.store().createRecord('role', {name: 'Owner'});\n\n                    model.set('role', role);\n\n                    expect(model.get('isOwner')).to.be.ok;\n                    expect(model.get('isAuthor')).to.not.be.ok;\n                    expect(model.get('isAdmin')).to.not.be.ok;\n                    expect(model.get('isEditor')).to.not.be.ok;\n                });\n            });\n        }\n    );\n  });",
    "define(\"ghost/tests/unit/utils/ghost-paths_test\", \n  [\"ghost/utils/ghost-paths\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* jshint expr:true */\n\n    var ghostPaths = __dependency1__[\"default\"];\n\n    describe('ghost-paths', function () {\n        describe('join', function () {\n            var join = ghostPaths().url.join;\n\n            it('should join two or more paths, normalizing slashes', function () {\n                var path;\n\n                path = join('/one/', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one', '/two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/');\n                expect(path).to.equal('/one/two/');\n\n                path = join('/one/', 'two/', '/three/');\n                expect(path).to.equal('/one/two/three/');\n\n                path = join('/one/', 'two', 'three/');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should not change the slash at the beginning', function () {\n                var path;\n\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one/', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('/one/', 'two');\n                expect(path).to.equal('/one/two/');\n                path = join('one/', 'two', 'three');\n                expect(path).to.equal('one/two/three/');\n                path = join('/one/', 'two', 'three');\n                expect(path).to.equal('/one/two/three/');\n            });\n\n            it('should always return a slash at the end', function () {\n                var path;\n\n                path = join();\n                expect(path).to.equal('/');\n                path = join('');\n                expect(path).to.equal('/');\n                path = join('one');\n                expect(path).to.equal('one/');\n                path = join('one/');\n                expect(path).to.equal('one/');\n                path = join('one', 'two');\n                expect(path).to.equal('one/two/');\n                path = join('one', 'two/');\n                expect(path).to.equal('one/two/');\n            });\n        });\n    });\n  });"
  ]
}